#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
"""
import os
import sys
import django
import psycopg2
from django.core.management import execute_from_command_line

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        # –ü–∞—Ä—Å–∏–º DATABASE_URL
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
            
        from urllib.parse import urlparse
        url = urlparse(database_url)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã
        conn = psycopg2.connect(
            host=url.hostname or 'db',
            port=url.port or '5432',
            user=url.username or 'postgres',
            password=url.password or 'password',
            database='postgres'  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL
        db_name = url.path[1:] if url.path else 'carspark'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(f"SELECT 1 FROM pg_database WHERE datname='{db_name}'")
        exists = cursor.fetchone()
        
        if not exists:
            print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}'...")
            cursor.execute(f"CREATE DATABASE {db_name}")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_database()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'carspark_backend.settings')
    django.setup()
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    execute_from_command_line(['manage.py', 'makemigrations'])
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    execute_from_command_line(['manage.py', 'migrate'])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    try:
        from cars.models import Admin
        if not Admin.objects.filter(email='admin@carspark.com').exists():
            admin = Admin.objects.create_superuser(
                username='admin',
                email='admin@carspark.com',
                password='admin123',
                first_name='Admin',
                last_name='CarSpark',
                role='admin'
            )
            print(f"‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {admin.email}")
        else:
            print("‚ÑπÔ∏è –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    # try:
    #     execute_from_command_line(['manage.py', 'shell', '-c', 'exec(open("seed_data.py").read())'])
    #     print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    # except Exception as e:
    #     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == '__main__':
    main()
