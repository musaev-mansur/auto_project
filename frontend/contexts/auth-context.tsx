'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'

interface Admin {
  id: number
  email: string
  first_name: string
  last_name: string
  role: string
}

interface AuthContextType {
  admin: Admin | null
  loading: boolean
  login: (email: string, password: string) => Promise<boolean>
  logout: () => void
  isAuthenticated: boolean
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [admin, setAdmin] = useState<Admin | null>(null)
  const [loading, setLoading] = useState(true)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuth = async () => {
      try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const apiUrl = process.env.NEXT_PUBLIC_API_URL
        console.log('üîç API URL:', apiUrl)
        console.log('üîç –í—Å–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', process.env)
        
        if (!apiUrl) {
          console.error('‚ùå NEXT_PUBLIC_API_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!')
          return
        }
        
        const response = await fetch(`${apiUrl}/profile/`, {
          credentials: 'include'
        })
        
        console.log('üì• –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:', response.status)
        
        if (response.ok) {
          const userData = await response.json()
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', userData)
          setAdmin(userData)
        } else {
          console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏')
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
      } finally {
        setLoading(false)
      }
    }

    checkAuth()
  }, [])

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å:', { email, password: '***' })
      
      const apiUrl = process.env.NEXT_PUBLIC_API_URL
      const response = await fetch(`${apiUrl}/login/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è Django —Å–µ—Å—Å–∏–π
        body: JSON.stringify({ email, password })
      })

      console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
      console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()))

      const data = await response.json()
      console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data)

      if (response.ok) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞:', data.user)
        setAdmin(data.user)
        return true
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data.error)
        return false
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error)
      return false
    }
  }

  const logout = async () => {
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL
      await fetch(`${apiUrl}/logout/`, {
        method: 'POST',
        credentials: 'include'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
    } finally {
      setAdmin(null)
    }
  }

  const value = {
    admin,
    loading,
    login,
    logout,
    isAuthenticated: !!admin
  }

  console.log('üîç AuthContext —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    admin,
    loading,
    isAuthenticated: !!admin
  })

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
    return {
      admin: null,
      loading: false,
      login: async () => false,
      logout: () => {},
      isAuthenticated: false
    }
  }
  return context
}
